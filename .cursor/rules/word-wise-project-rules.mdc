---
description: 
globs: 
alwaysApply: false
---
Description: WordWise AI project-specific development rules and task management
Globs: **/*.ts, **/*.tsx, **/*.js, **/*.jsx, **/*.json, **/*.md

# WordWise AI Project Rules

## Task Management

This project follows a detailed task list located at:
**`tasks/tasks-wordwise-opus.md`**

**Master Project Plan Reference:**
The task list is adapted from the comprehensive project plan at **`planning/planv2claudeOpus.md`**. 
If there is ever any clarification needed or ambiguity in requirements, refer to this master project plan as the authoritative source for project scope, goals, and detailed specifications.

### CRITICAL: Read Docker Development Requirements

**BEFORE starting any development work, you MUST read the Docker development environment requirements at the top of `tasks/tasks-wordwise-opus.md`.** 

This section contains critical information about:
- Why Docker development is required for this project
- Correct development workflow using `docker-compose up`
- What NOT to do (local npm/vite commands)
- Environment variable handling in containers

### Task Completion Protocol

Follow the task completion protocol outlined in the process-task-list.mdc rule:
- Complete ONE sub-task at a time
- Wait for user permission before proceeding to next sub-task
- Mark completed tasks with `[x]` in the task list
- Update the "Relevant Files" section as you work

### Task Startup Process - REQUIRED

**Before starting any new task, the agent MUST:**

1. **Read the detailed task implementation** in `tasks/tasks-wordwise-opus.md`
   - Study the specific task goals, implementation steps, and test criteria
   - Review any code examples or pseudocode provided

2. **Review the original plan section** in `planning/planv2claudeOpus.md`
   - Find the corresponding section that the task was adapted from
   - Understand the broader context, requirements, and design decisions
   - Note any important details that may not be in the task list

3. **Create a development plan** that synthesizes both sources
   - Outline the approach based on both the task details and original requirements
   - Identify potential challenges or dependencies
   - Note any assumptions or decisions that need clarification

4. **Present the plan for approval** before beginning implementation
   - Wait for explicit approval before proceeding with any coding
   - Address any feedback or requested modifications
   - Only begin implementation after receiving approval

**This process prevents misaligned implementation and ensures quality delivery.**

### Project Context

WordWise AI is a marketing copy assistant with:
- React frontend with TypeScript
- Supabase backend (auth, database, edge functions)
- TipTap rich text editor
- AI-powered suggestions for copywriting
- Containerized development environment

### Development Environment Verification

Always verify the Docker environment is running before starting work:
```bash
docker-compose ps
# Should show frontend and postgres containers running
```

Access the application at: http://localhost:3000/ (served from Docker container)

**Failure to follow the Docker development requirements has repeatedly caused environment issues. Always prioritize containerized development over local machine development.**

## Environment Variables Setup

### File Structure (All Working Correctly)
- `/.env` - Root environment file (gitignored, contains real Supabase credentials)
- `/.env.example` - Root template (tracked in git)  
- `/frontend/.env` - Frontend copy (gitignored, same credentials as root)
- `/frontend/.env.example` - Frontend template (tracked in git)

### Docker Integration
- Root `.env` is read by Docker Compose via `${VARIABLE_NAME}` syntax
- Variables injected into frontend container via docker-compose.yml environment section
- Frontend Vite server accesses via `import.meta.env.VITE_*` pattern
- Both root and frontend `.env` files contain identical Supabase credentials

### CRITICAL Rule for AI Assistants
**Environment variables are properly configured and working. Do NOT:**
- Assume ENV issues when CSS/styling problems occur
- Try to "fix" ENV when unrelated frontend issues happen  
- Create placeholder ENV files - real credentials already exist
- Blame ENV for frontend compilation, styling, or Tailwind issues

### Debugging ENV vs Other Issues
- **ENV Problem Signs**: Console errors about missing/invalid Supabase credentials, authentication failures
- **NOT ENV Problems**: CSS not applying, Tailwind not working, UI styling issues, component rendering problems
- **Quick Test**: If test login button works and no Supabase errors in console, ENV is fine

### If Real ENV Issues Suspected
1. Check `docker-compose logs frontend` for credential-related errors
2. Verify both root and frontend ENV files have same values: `diff .env frontend/.env`
3. Confirm Docker container restart after ENV changes: `docker-compose restart frontend`
4. Check Supabase dashboard for project status and correct URLs

## Tailwind CSS v4 Configuration - CRITICAL RULE

### Project Uses Tailwind CSS v4+ 
**This project is configured for Tailwind CSS v4+ with Vite integration. Do NOT use legacy Tailwind v3 syntax.**

### CORRECT Tailwind v4 Setup (Current Configuration)
- **Package**: `@tailwindcss/vite` v4.1.10+ 
- **Vite Plugin**: `tailwindcss()` imported from `@tailwindcss/vite`
- **CSS Import**: `@import "tailwindcss";` (NOT @tailwind directives)
- **Config File**: `tailwind.config.js` (minimal, extensions only)

### ❌ NEVER USE These Legacy v3 Patterns

#### CSS File Syntax
```css
/* ❌ WRONG - v3 syntax that BREAKS v4 */
@tailwind base;
@tailwind components; 
@tailwind utilities;

/* ❌ WRONG - v3 custom component syntax */
@layer components {
  .btn-primary {
    @apply bg-blue-500 text-white;
  }
}
```

#### Config File Patterns
```js
// ❌ WRONG - v3 color config that doesn't work in v4
module.exports = {
  theme: {
    extend: {
      colors: {
        'primary-dark': '#2b2d42',
        'custom-blue': {
          50: '#eff6ff',
          500: '#3b82f6'
        }
      },
      fontFamily: {
        sans: ['Inter', 'sans-serif']
      }
    }
  }
}
```

#### Plugin Configuration
```js
// ❌ WRONG - v3 plugin syntax
const plugin = require('tailwindcss/plugin')
module.exports = {
  plugins: [
    plugin(function({ addUtilities }) {
      addUtilities({
        '.custom-class': {
          'property': 'value'
        }
      })
    })
  ]
}
```

### ✅ ALWAYS USE These v4 Patterns

#### CSS File Syntax
```css
/* ✅ CORRECT - v4 syntax */
@import "tailwindcss";

/* ✅ CORRECT - v4 custom properties */
@theme {
  --color-primary-dark: #2b2d42;
  --color-medium-gray: #8d99ae;
  --color-light-gray: #edf2f4;
  --font-family-display: "Inter", sans-serif;
}

/* ✅ CORRECT - v4 custom utilities */
@utility btn-primary {
  background-color: theme(--color-primary-dark);
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
}
```

#### Vite Configuration
```js
// ✅ CORRECT - v4 with Vite plugin
import tailwindcss from '@tailwindcss/vite'

export default defineConfig({
  plugins: [react(), tailwindcss()],
})
```

#### Package Dependencies
```json
// ✅ CORRECT - v4 packages
{
  "devDependencies": {
    "@tailwindcss/vite": "^4.1.10",
    "tailwindcss": "^4.1.10"
  }
}

// ❌ WRONG - mixing v3 and v4
{
  "devDependencies": {
    "tailwindcss": "^3.4.0",
    "autoprefixer": "^10.4.0",
    "postcss": "^8.4.0"
  }
}
```

### Common Class Name Differences
```html
<!-- ✅ CORRECT - These work in both v3 and v4 -->
<div class="bg-slate-800 text-white rounded-xl shadow-lg">

<!-- ✅ CORRECT - v4 supports these standard patterns -->
<div class="max-w-sm mx-auto p-6 space-y-4">
<button class="hover:bg-slate-700 focus:ring-2 focus:ring-slate-500">

<!-- ⚠️  WATCH OUT - Custom colors need @theme definition in v4 -->
<div class="bg-primary-dark text-custom-gray">
<!-- Only works if defined in @theme block -->
```

### Critical Signs of v3/v4 Mismatch
- **CSS not applying** despite correct class names
- **Classes work in browser dev tools** but not in app
- **Hot reload updates CSS** but changes don't appear
- **No compilation errors** but styling completely missing
- **Custom colors not recognized** (primary-dark, custom-blue, etc.)
- **Build warnings** about unknown @tailwind directives

### AI Assistant Requirements
1. **ALWAYS check package.json** for Tailwind version before suggesting CSS changes
2. **VERIFY CSS import syntax** matches the Tailwind version in use
3. **NEVER assume v3 syntax** - this project uses v4+
4. **If styling doesn't work**, check CSS import syntax FIRST before other debugging
5. **Use standard Tailwind colors** (slate, blue, red) unless custom colors defined in @theme
6. **Don't suggest @layer or @apply directives** - use @utility for v4 custom styles

### Quick Version Check
```bash
# Check if project uses v4
grep "@tailwindcss/vite" frontend/package.json
# Should return: "@tailwindcss/vite": "^4.1.10"

# Check CSS syntax  
head -1 frontend/src/index.css  
# Should return: @import "tailwindcss";

# Verify no v3 packages
grep -E "(autoprefixer|postcss)" frontend/package.json
# Should return nothing (v4 doesn't need these)
```

### Emergency Fix for v3/v4 Syntax Issues
If CSS suddenly stops working:
1. **Replace** `@tailwind` directives with `@import "tailwindcss";`
2. **Remove** any `@layer` or `@apply` usage
3. **Check** for custom colors - use standard Tailwind colors or define in @theme
4. **Restart** Docker container: `docker-compose restart frontend`
5. **Verify** browser shows immediate styling changes

**This rule exists because v3/v4 syntax confusion has repeatedly caused significant development delays. Following this prevents hours of wasted debugging time.**

## WordWise Design System - Consistency Rules

### Color Palette (Slate-based Professional Theme)
**Primary Colors:**
- `slate-800` - Primary text, main CTAs, headings
- `slate-600` - Secondary text, secondary buttons  
- `slate-400` - Placeholder text, muted elements
- `slate-200` - Borders, dividers, subtle backgrounds
- `slate-100` - Light backgrounds, gradients
- `white` - Card backgrounds, main surfaces

**Accent Colors:**
- `red-50/200/700` - Error states, validation
- `blue-50/600` - Links, informational elements
- `green-50/600` - Success states

### Typography Hierarchy
**Headings:**
- Main title: `text-5xl font-extrabold text-slate-800 tracking-tight`
- Subtitle: `text-lg font-medium text-slate-600`
- Section headers: `text-sm font-semibold text-slate-800`

**Body Text:**
- Primary: `text-slate-800`
- Secondary: `text-slate-600`
- Muted: `text-slate-400`
- Small text: `text-xs text-slate-600`

### Layout Patterns
**Page Structure:**
- Full screen: `min-h-screen`
- Centered content: `flex items-center justify-center`
- Gradient backgrounds: `bg-gradient-to-br from-slate-100 to-white`
- Container constraints: `max-w-sm` for forms, `max-w-2xl` for content

**Card Components:**
- Background: `bg-white`
- Borders: `border border-slate-200`
- Corners: `rounded-2xl` for cards, `rounded-xl` for inputs/buttons
- Shadows: `shadow-xl` for main cards, `shadow-sm` for buttons

### Form Elements
**Input Fields:**
- Base: `w-full px-4 py-3 border-2 border-slate-200 rounded-xl`
- Focus: `focus:outline-none focus:ring-2 focus:ring-slate-800/20 focus:border-slate-800`
- Placeholder: `placeholder-slate-400`
- Transitions: `transition-all duration-200`

**Buttons:**
- Primary: `bg-slate-800 hover:bg-slate-700 text-white font-semibold py-3.5 px-4 rounded-xl`
- Secondary: `bg-slate-600 hover:bg-slate-500 text-white font-semibold py-3.5 px-4 rounded-xl`
- Focus: `focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-slate-800/50`
- Disabled: `disabled:opacity-50 disabled:cursor-not-allowed`

### Interactive States
**Standard Transitions:**
- All interactive elements: `transition-all duration-200`
- Links: `transition-colors duration-200`

**Focus States:**
- Form inputs: Ring with 20% opacity of primary color
- Buttons: Ring with 50% opacity, 2px offset

### Spacing System
**Container Spacing:**
- Page padding: `py-12 px-4 sm:px-6 lg:px-8`
- Card padding: `p-8`
- Form spacing: `space-y-6` for sections, `space-y-5` for fields
- Section margins: `mb-8` for headers, `mt-8` for footers

### Component Patterns
**Error Messages:**
- `bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-xl text-sm`

**Dividers:**
- `border-t border-slate-200` with text overlay using bg-white

**Loading States:**
- Use `opacity-50` and `cursor-not-allowed` for disabled states
- Spinner or "Loading..." text

### Consistency Requirements
1. **Always use slate color palette** for primary interface elements
2. **Maintain rounded-xl/2xl corner radius** throughout the app
3. **Use consistent padding scales** (px-4, py-3, p-8, etc.)
4. **Apply transitions to all interactive elements**
5. **Follow the typography hierarchy** for headings and text
6. **Use the established card pattern** for containers
